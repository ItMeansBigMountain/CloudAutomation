TERRAFORM AZURE 
    make sure you have AZURE CLI
        'az login'
    make sure you have TERRAFORM CLI
    name playbook file as 'main.tf'









TERRAFORM CDK
    'cloud development kit'
    - Coding Libraries To Import & Use Within Scripts
    - python, java, typescript, c#, go

    - MUST HAVE npm & pipenv INSTALLED

    -DELETE PIPENV VIRTUAL ENVIROMENTS
        - cd into project directory
        - pipenv --rm

    CREATE PROJECT 
        # npm install -g cdktf-cli
        # cdktf init --template=python --local

    ADD PROVIDERS TO CODE-BASE
        - cdktf.json ---> add provider string inside array
        - cdktf get  ---> downloads .gen package























DEPLOYING A RESOURCE GROUP
    Set {provider} to 'azurerm'
    Set {resource} to  'azurerm_resource_group'
        fill in parameters

    RUN [main.tf]
        write 'terraform validate'
        write 'terraform init'
        write 'terraform plan'
        write 'terraform apply'

    UNDO EVERYTHING TERRAFORM FILE PLANNED
        write 'terraform destroy'























RUN TERRAFORM PLAN [main.tf]
    write 'terraform validate'
    write 'terraform init'
    write 'terraform plan'
    write 'terraform apply'  (  'apply' also runs 'plan' unless given an '-out file'   )



SAVE TERRAFROM PLAN AS OUTPUT
    write 'terraform plan -out FILE_NAME.plan'

    USE TERRAFORM PLAN
    write 'terraform apply FILE_NAME.plan'





























DISPLAY LIST OF CURRENT TERRAFORM STATE
    terraform state list
























Authenticate Terraform to Azure using a Service Principal
    
    CREATE SERVICE PRINCIPAL APPLICATION
        az ad sp create-for-rbac --name {SERVICE_PRINCIPAL_NAME} --role {ROLE_NAME} --scopes /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup1}

            ex: az ad sp create-for-rbac --name SPterraform --role Contributor --scopes /subscriptions/e928ce0b-aa60-4e05-a8c2-a9eb05266c69/resourceGroups/learning

    "MAKE SURE TO COPY THE RETURN IN THE CLI AND SAVE IT AS AUTH REFERENCE"
    DASHBOARD SERVICE PRINCIPAL CHECK
        - go to active directory
        - app regstrations
        - here you will find newly made Service Principal

    RESET SERVICE PRINCIPAL APPLICATION CREDENTIALS
        az ad sp credential reset --name "appid"







    - ADD SERVICE PRINCIPAL OUTPUT INTO BASH ENV VARIABLES
        - write 'code ~/.bashrc'
        - add to the bottom of the page
        - source files
            write '. ~/.bashrc'
    
        VERIFY VARIABLES
            - write 'printenv | grep ^ARM*'
        
        ACCESS VARIABLE
            - write '$(env.ARM_CLIENT_SECRET}'




    - SAVE AZURE CREDENTIALS WITHIN TERRAFORM CONFIG FILE

        add SERVICE PRINCIPAL credentials inside 'provider{}' block
            [FETCH CREDENTIALS FROM CLI OR AZURE APP REGISTRATIONS DASHBOARD]
            


            ``````````````````` CODE BLOCK ```````````````````

            provider "azurerm" {
            features {}

            subscription_id  = "azure_subscription_id"
            tenant_id        = "azure_subscription_tenant_id"
            client_id        = "service_principal_appid"
            client_secret    = "service_principal_password"
            }

            ``````````````````````````````````````````````````
























STEPS TO CREATE VIRTUAL MACHINE 
    # create a resource group
    # create a virtual network
    # create a subnet
    # create a network interface card
    # create a virtual machine (we can also create disks etc as a separate step)






STEPS TO CREATE STORAGE CONTAINER
    # create / choose a resource group
    # create a storage account
    # create a storage container
    # upload a blob file

































JSON TERRAFORM FILE!!!
    - you can run .json files like .tf files!!!
    
    - naming convention: main.tf --> main.tf.json   


    -You could use python to dump a json file with keys corresponding to terraform configuration!




    

    ********   JSON EXAMPLE ( main.tf.json   )   **********
     
        {
            "resource": {
                    "aws_instance": {
                    "example": {
                        "instance_type": "t2.micro",
                        "ami": "ami-abc123"
                    }
                }
            }
        }
    *******************************************************


    *************  HCL EXAMPLE (  main.tf  )  *************
    
        resource "aws_instance" "example" {
            instance_type = "t2.micro"
            ami           = "ami-abc123"
        }
    *******************************************************